@using Admin.BlazorServer.Contracts
@using Admin.BlazorServer.Models
@using Admin.BlazorServer.Validators
@using Blazored.FluentValidation

@inject IInventoryService inventoryService

<div class="p-2 lg:w-112 text-center">
    <div class="mb-2 md:-mt-8 text-lg md:text-lg lg:text-xl font-semibold">
        Remove Stock for:
    </div>
    <div class="mb-4 text-lg md:text-xl lg:text-2xl font-bold">
        @Name
    </div>
    <div class="px-2 md:px-4 py-2">
        <EditForm Model="UpdateStock" OnValidSubmit="SubmitStockUpdate">
            <FluentValidationValidator />
            <div class="mb-3 w-1/3 text-left">
                <label class="text-md font-semibold mb-1 ml-0">Remove</label>
                <input Id="removed" type="number" @oninput="RemoveAfterUpdateStock" @bind-value="UpdateStock.Removed" max="@CurrentStock" min="" Class="px-2 py-1 rounded-sm focus:border-blue-700 border-3 outline-none w-full" />
                <ValidationMessage For="@(() => UpdateStock.Removed)" />
            </div>
            <div class="mb-4 w-full text-left">
                <label class="text-md font-semibold mb-1 ml-0">Current Stock: @CurrentStock</label>
            </div>
            <div class="mb-4 w-full text-left">
                <label class="text-md font-semibold mb-1 ml-0">After Update: @AfterUpdateStock</label>
            </div>
            <div class="my-4 w-full">
                <button type="submit" class="bg-fotofuchsia text-gray-50 w-full p-2 mt-3 rounded-sm font-semibold fotofuchsia-ripple disabled:opacity-30 disabled:cursor-default" >
                    Submit
                </button>
                <button type="submit" @onclick="Cancel" class="bg-fotoblue text-gray-50 w-full p-2 mt-3 rounded-sm font-semibold fotoblue-ripple disabled:opacity-30 disabled:cursor-default" >
                    Cancel
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] 
    public string? Sku { get; set; }

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public int CurrentStock { get; set; }

    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; }

    private RemoveStockValidationModel UpdateStock = new RemoveStockValidationModel();

    private int AfterUpdateStock;

    protected override void OnInitialized()
    {
        AfterUpdateStock = CurrentStock;
    }

    private async Task SubmitStockUpdate()
    {
        var update = new UpdateStockModel
        {
            Sku = Sku,
            Added = 0,
            Removed = UpdateStock.Removed
        };

        var stockUpdate = await inventoryService.UpdateStock(update);

        if (stockUpdate != null)
        {
            if (stockUpdate.Successful)
            {
                var updateResult = new UpdateStockResult
                {
                    Successful = true,
                    Error = ""
                };

                await ModalInstance.CloseAsync(ModalResult.Ok<UpdateStockResult>(updateResult));
            }
            else 
            {
                var updateResult = new UpdateStockResult 
                {
                    Successful = false,
                    Error = "Sorry, the stock for this product could not be updated"
                };

                await ModalInstance.CloseAsync(ModalResult.Ok<UpdateStockResult>(updateResult));
            }
        }
        else 
        {
            var updateResult = new UpdateStockResult {
                Successful = false,
                Error = "Sorry, the stock for this product could not be updated"
            };

            await ModalInstance.CloseAsync(ModalResult.Ok<UpdateStockResult>(updateResult));
        }
    }

    private void RemoveAfterUpdateStock(ChangeEventArgs obj)
    {
        if (obj.Value != null)
        {
            int result;
            var tryparse = int.TryParse(obj.Value.ToString(), out result);

            if (tryparse)
            {
                if (result < 0)
                {
                    UpdateStock.Removed = 0;
                    result = 0;
                }

                if (result > CurrentStock)
                {
                    result = CurrentStock;
                }

                AfterUpdateStock = CurrentStock - result;
            }
            else
            {
                AfterUpdateStock = CurrentStock;
            }
        }
        else
        {
            AfterUpdateStock = CurrentStock;
        }
    }

    private void Cancel()
    {
        ModalInstance.CancelAsync();
    }
}
