@page "/orders"

@using Admin.BlazorServer.Contracts
@using Admin.BlazorServer.DTOs
@using Admin.BlazorServer.Extensions
@using Admin.BlazorServer.Models

@inject NavigationManager navigationManager
@inject IOrderService orderService

<AuthGuard RolesAllowed="Administrator" />

<div class="h-screen">
    <div class="px-0 md:container md:max-w-7xl md:mt-8">
        <div class="w-full p-4 rounded-md shadow-md bg-white focus:outline-none z-10">
            <div class="text-lg text-center md:text-xl lg:text-2xl font-bold mb-4">
                Customer Orders
            </div>
            @if (errorMessage != "")
            {
                <div class="mx-2 animate-pulse">
                    <div class="alert-box text-center" role="alert">
                        <span class="block sm:inline">@errorMessage</span>
                    </div>
                </div>
            }
            else if (orders == null)
            {
                <text>Loading orders...</text>
            }
            else
            {
                <div class="flex flex-col lg:flex-row flex-wrap justify-items-center items-center lg:justify-between">
                    <div class="relative inline-block mx-auto mb-4">
                        <!-- Filter By dropdown -->
                        <div class="text-center mt-8 lg:mt-0 lg:text-left">
                            <div class="text-gray-700 mr-2 py-2 text-base font-medium inline">Orders placed in last:</div>
                            <div class="inline-block">
                                <button type="button" class="inline-flex md:flex-grow justify-center w-32 rounded-sm border border-gray-700 shadow-sm px-2 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none" 
                                    id="menu-button"
                                    @onclick="ToggleDropdown"
                                >
                                    @FilterBySelectedName
                                    <!-- Heroicon name: solid/chevron-down -->
                                    <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                                @if (dropdownOptions != null)
                                {
                                    <div class="origin-top-right absolute right-0 mt-2 w-32 rounded-md shadow-md bg-white focus:outline-none transition duration-300 transform ease-in-out @DropdownTransformClass" role="menu" tabindex="-1">
                                        <div class="py-1 hover:cursor-pointer">
                                            @foreach (DropdownItem item in dropdownOptions)
                                            {
                                                <NavLink  
                                                    class="block px-4 py-1 text-base text-center font-semibold text-gray-700 hover:bg-gray-200 hover:text-gray-700 " 
                                                    role="menuitem" 
                                                    tabindex="-1" 
                                                    id=@($"menu-item-{item.Id}")
                                                    @onclick='async () => await UpdateOrdersFilter(item.OptionRef, item.OptionName)'
                                                >
                                                    <span class="text-center cursor-pointer">@item.OptionName</span>
                                                </NavLink>
                                            }
                                        </div>
                                    </div>
                                }
                        </div>
                    </div>
                </div>

                @if (orders.Count() > 0)
                {
                    <div class="p-2 md:p-4 text-center w-auto text-sm lg:text-base">
                        <div class="flex flex-row mb-2 font-bold uppercase">
                            <div class="px-1 w-0 hidden md:block md:w-1/5 md:px-2">Order #</div>
                            <div class="px-1 w-1/3 md:w-1/5 md:px-2">Date</div>
                            <div class="px-1 w-1/3 text-right md:w-1/5 md:px-2 sm:text-center">Total</div>
                            <div class="px-1 w-0 hidden md:block md:w-1/5 md:px-2">Status</div>
                            <div class="px-1 w-1/3 md:w-1/5 md:px-2">&nbsp;</div>
                        </div>
                        <div class="font-normal">
                            @foreach (OrderDetailsDTO order in orders)
                            {
                                <div class="flex flex-row items-center -mb-3">
                                    <div class="px-1 w-0 hidden md:block md:w-1/5 md:px-2">@order.Id</div>
                                    <div class="px-1 w-1/3 md:w-1/5 md:px-2">@order.OrderDate.ToUKStandardDate()</div>
                                    <div class="px-1 w-1/3 text-right md:w-1/5 md:px-2 sm:text-center">£@order.Total</div>
                                    <div class="px-1 w-0 hidden md:block md:w-1/5 md:px-2">@order.Status</div>
                                    <div class="px-1 w-1/3 md:w-1/5 md:px-2">
                                        <button type="button" class="hidden lg:block btn-fotofuchsia fotofuchsia-ripple" @onclick="() => ViewOrderDetails(order.Id)">View Order</button>
                                        <button type="button" class="lg:hidden btn-fotofuchsia fotofuchsia-ripple" @onclick="() => ViewOrderDetails(order.Id)">View</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="p-4 text-center">
                        No orders found
                    </div>
                    <div class="mt-4 text-center">
                        <NavButton
                            Href="/"
                            ButtonText="Back to Home page"
                        />
                    </div>
                }
            }
            
        </div>
    </div>
</div>

@code {
    [CascadingParameter] 
    public IModalService Modal { get; set; }

    private string errorMessage = "";
    private List<OrderDetailsDTO> orders;
    private string FilterBySelectedRef = "60";
    private string FilterBySelectedName = "60 Days";

    List<DropdownItem> dropdownOptions = new();
    private bool collapseDropdown = true;
    private string DropdownTransformClass => collapseDropdown ? "transform opacity-0 scale-90 z-0" : "z-10";

    private void ToggleDropdown()
    {
        collapseDropdown = !collapseDropdown;
    }

    protected override void OnInitialized()
    {
        SetSortByDropdownOptions();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetOrders();
    }

    private async Task GetOrders()
    {
        try
        {
            int result;
            var tryDaysParse = int.TryParse(FilterBySelectedRef, out result);
            var days = tryDaysParse ? result : 30;

            orders = await orderService.GetLatestOrdersAsync(days);
            errorMessage = "";
        }
        catch (Exception)
        {
            errorMessage = "Could not retrieve list of orders";
        }
    }

    private async Task UpdateOrdersFilter(string FilterBy, string FilterByName) 
    {
        FilterBySelectedRef = FilterBy;
        FilterBySelectedName = FilterByName;
        ToggleDropdown();
        await GetOrders();
    }

    private void SetSortByDropdownOptions()
    {
        dropdownOptions.Add(new DropdownItem{ Id = 1, OptionName = "24 Hours", OptionRef = "1" });
        dropdownOptions.Add(new DropdownItem{ Id = 2, OptionName = "7 Days", OptionRef = "7" });
        dropdownOptions.Add(new DropdownItem{ Id = 3, OptionName = "60 Days", OptionRef = "60" });
    }

    private void ViewOrderDetails(int orderId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(OrderDetailsModal.Id), orderId);

        var options = new ModalOptions() 
        { 
            Animation = ModalAnimation.FadeInOut(0.25)
        };

        var orderDetailsModal = Modal.Show<OrderDetailsModal>("", parameters, options);
    }
}
