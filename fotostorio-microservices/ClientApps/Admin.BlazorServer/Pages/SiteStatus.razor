@page "/sitestatus"

@using Admin.BlazorServer.Contracts
@using Admin.BlazorServer.DTOs

@inject IConfiguration config
@inject IOrderService orderService
@inject IInventoryService inventoryService
@inject IHealthService healthService
@inject IProductService productService

<AuthGuard RolesAllowed="Administrator" />

<div class="text-3xl mb-8 mt-8 font-bold text-center">
    <span class="text-blue-800">FotoStorio</span> Store Status
</div>

<div class="text-lg text-gray-600 mb-4 font-semibold text-center">
    Last Updated: @LastUpdated
</div>

<div class="my-10 grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3 gap-10">
    <div class="mx-auto w-72">
        <img src="https://i.ibb.co/0Kcr8qN/fotostorio-admin-website.jpg" class="w-full h-56 opacity-90 object-cover object-top shadow-md rounded-md">
        <div class="relative px-4 -mt-16 text-center">
            <div class="bg-white p-4 rounded-lg shadow-lg">
                <h4 class="mt-1 text-xl font-semibold uppercase leading-tight truncate">Website Status</h4>
                <div class="mt-4">
                    <span class="@healthTextColour text-lg font-semibold">@healthMessage</span>
                </div>
                <div class="mt-4">
                    <span class="text-sm text-gray-600">
                        For full details, see the <a href=@AppStatusUri target="_blank" class="text-blue-800">Application Status</a> app
                    </span>
                </div>  
            </div>
        </div>
    </div>

    <div class="mx-auto w-72">
        <img src="https://i.ibb.co/9cx8D52/fotostorio-admin-orders.jpg" class="w-full h-56 opacity-90 object-cover object-center shadow-md rounded-md">
        <div class="relative px-4 -mt-16 text-center">
            <div class="bg-white p-4 rounded-lg shadow-lg">
                <h4 class="mt-1 text-xl font-semibold uppercase leading-tight truncate">Recent Orders</h4>
                <div class="mt-4">
                    <span class="text-teal-600 text-lg font-semibold">@ordersMessage</span>
                </div>
                <div class="mt-4">
                    <span class="text-sm text-gray-600">
                        For full details, see the <a href="orders" class="text-blue-800">Customer Orders</a> page
                    </span>
                </div>
            </div>
        </div>
    </div>

    <div class="mx-auto w-72">
        <img src="https://i.ibb.co/6DwcnGS/fotostorio-admin-stock.jpg" class="w-full h-56 opacity-90 object-cover object-center shadow-md rounded-md">
        <div class="relative px-4 -mt-16 text-center">
            <div class="bg-white p-4 rounded-lg shadow-lg">
                <h4 class="mt-1 text-xl font-semibold uppercase leading-tight truncate">Low Stock</h4>
                <div class="mt-4">
                    <span class="text-teal-600 text-lg font-semibold">@stockMessage</span>
                </div>
                <div class="mt-4">
                    <span class="text-sm text-gray-600">
                        For full details, see the <a href="stockcontrol" class="text-blue-800">Stock Control</a> page
                    </span>
                </div>  
            </div>
        </div>
    </div>
</div>

@if (showProductCount)
{
    <div class="text-xl mt-24 font-semibold text-center">
        There are currently <span class="text-teal-600">@productCountToDisplay</span> products listed in the store
    </div>
}

@if (AzureConfigured)
{
    <div class="border-dashed border-3 rounded-md border-blue-800 p-4 mx-auto w-64 text-center mt-12 mb-4">
        <span class="text-xl font-semibold">
            <a href="addproduct">Add a New Product</a>
        </span>
    </div>
}
else 
{
    <div class="text-lg mt-12 mb-4 font-semibold text-center text-gray-500">
        To be able to add new products, you need to configure an Azure storage account.
        <br />
        You can find documentation on how to do that here: <a href="https://github.com/DavidAJohn/FotoStorioMicroservices" class="text-blue-800">https://github.com/DavidAJohn/FotoStorioMicroservices</a>
    </div>
}

@code {
    string LastUpdated = "";
    bool AzureConfigured = false;
    string AppStatusUri = "";

    private string healthMessage = "Checking...";
    private string healthTextColour = "text-teal-600 ";
    private string ordersMessage = "Checking...";
    private string stockMessage = "Checking...";

    private string productCountToDisplay = "";
    private bool showProductCount = false;

    protected override void OnInitialized()
    {
        LastUpdated = DateTime.Now.ToString();
        AppStatusUri = $"{config["ApiSettings:AppStatusUri"]}/hc-ui";

        CheckAzureConfig();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetRecentOrderCount();
        await GetLowStockProductCount();
        await GetHealthCheckStatus();
        await GetProductCount();
    }

    private void CheckAzureConfig()
    {
        var storageAccountName = config["AzureSettings:AssetBaseUrl"];
        var maxFileUploadSize = config["AzureSettings:MaxFileUploadSize"];
        var fileUploadTypes = config["AzureSettings:FileUploadTypesAllowed"];

        if (string.IsNullOrWhiteSpace(storageAccountName) ||
            string.IsNullOrWhiteSpace(maxFileUploadSize) ||
            string.IsNullOrWhiteSpace(fileUploadTypes)
            )
        {
            AzureConfigured = false;
        }
        else
        {
            AzureConfigured = true;
        }
    }

    private async Task GetRecentOrderCount()
    {
        try
        {
            var days = config.GetValue<int>("StoreStatusSettings:RecentOrderDaysThreshold");
            var orders = await orderService.GetLatestOrdersAsync(days);

            if (orders != null)
            {
                string orderText = orders.Count == 1 ? "order" : "orders";
                ordersMessage = $"{orders.Count} {orderText} in last {days} days";
            }
            else
            {
                ordersMessage = "Unknown - try page refresh";
            }
        }
        catch (Exception)
        {
            ordersMessage = "Unknown - try page refresh";
        }
    }

    private async Task GetLowStockProductCount()
    {
        try
        {
            var lowStockThreshold = config.GetValue<int>("StoreStatusSettings:LowStockThreshold");

            if (lowStockThreshold >= 0)
            {
                var products = await inventoryService.GetInventoryAtOrBelowLevelAsync(lowStockThreshold);

                if (products != null)
                {
                    string productsText = products.Count == 1 ? "product" : "products";
                    stockMessage = $"{products.Count} {productsText}";
                }
            }
        }
        catch (Exception)
        {
            stockMessage = "Unknown - try page refresh";
        }
    }

    private async Task GetHealthCheckStatus()
    {
        try
        {
            var healthChecks = await healthService.GetHealthChecksAsync();

            if (healthChecks != null)
            {
                var problemCount = 0;

                foreach (var check in healthChecks)
                {
                    if (check.Status != "Healthy")
                    {
                        problemCount++; 
                    }
                }

                if (problemCount == 0)
                {
                    healthTextColour = "text-green-600 ";
                    healthMessage = "Healthy";
                }
                else
                {
                    healthTextColour = problemCount > 1 ? "text-red-800 " : "text-yellow-600 ";
                    healthMessage = problemCount > 1 ? "Possible Issues" : "Possible Issue";
                }
            }
            else
            {
                healthMessage = "Unknown - check link below";
            }
        }
        catch (Exception)
        {
            stockMessage = "Unknown - check link below";
        }
    }

    private async Task GetProductCount()
    {
        var productCount = await productService.GetProductCountAsync();

        if (productCount == 0)
        {
            showProductCount = false;
        }
        else
        {
            productCountToDisplay = productCount.ToString();
            showProductCount = true;
        }
    }
}
