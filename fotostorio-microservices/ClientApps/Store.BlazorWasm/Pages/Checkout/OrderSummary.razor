@page "/checkout"

@attribute [Authorize]

@using Blazored.LocalStorage
@using Blazored.Toast
@using Store.BlazorWasm.Contracts
@using Store.BlazorWasm.DTOs
@using Store.BlazorWasm.Models

@inject IBasketService basketService
@inject IOrderService orderService
@inject ILocalStorageService localStorage
@inject IToastService toastService

<div class="h-screen">
    <div class="container max-w-7xl md:mt-8">
        @if (basketItems != null)
        {
            @if (basketItems.Count > 0)
            {
                <div class="w-full p-4 rounded-md shadow-md bg-white focus:outline-none z-10">
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div class="col-span-1">
                            <div class="text-lg text-center md:text-xl lg:text-2xl font-bold">
                                Order Summary
                            </div>
                            <div class="p-4 text-right" >
                                @foreach (BasketItem item in basketItems)
                                {
                                    <div class="font-semibold text-md flex items-center justify-end">
                                        <div class="inline-block w-16 h-auto mr-2"><img src="@item.Product.ImageUrl" /></div>
                                        <div class="inline-block flex-shrink-0">@item.Quantity &nbsp;x&nbsp; @item.Product.Name &nbsp;=</div>
                                        <div class="ml-2 font-bold">£@item.Total</div>
                                        <button type="button" class="inline-block ml-2 -mr-1 text-fotofuchsia" @onclick="() => DeleteItem(item)">
                                            <!-- heroicons: x-circle (solid) -->
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="mt-2 px-4 text-right text-md font-semibold">
                                Total:&nbsp; <span class="inline font-bold">£@basketTotal.ToString("N2")</span>
                            </div>
                            
                        </div>
                        <div class="col-span-1 bg-gray-50 rounded-sm text-center h-full px-16">
                            <div class="text-lg text-center md:text-xl lg:text-2xl font-bold mb-4">
                                Delivery Address
                            </div>
                            <div class="flex justify-center px-4 md:px-8 py-2">
                                <EditForm Model="addressDTO" OnValidSubmit="PlaceOrder">
                                    <DataAnnotationsValidator />
                                    <div class="w-full inline-flex">
                                        <div class="inline mb-2 w-1/2 text-left mr-2">
                                            <label class="text-sm font-semibold mb-1 ml-0">First Name</label>
                                            <InputText Id="firstName" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.FirstName" />
                                            <ValidationMessage For="@(() => addressDTO.FirstName)" />
                                        </div>
                                        <div class="inline mb-2 w-1/2 text-left">
                                            <label class="text-sm font-semibold mb-1 ml-0">Last Name</label>
                                            <InputText Id="lastName" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.LastName" />
                                            <ValidationMessage For="@(() => addressDTO.LastName)" />
                                        </div>
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">Street</label>
                                        <InputText Id="street" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.Street" />
                                        <ValidationMessage For="@(() => addressDTO.Street)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">Village/Area (optional)</label>
                                        <InputText Id="secondLine" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.SecondLine" />
                                        <ValidationMessage For="@(() => addressDTO.SecondLine)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">City</label>
                                        <InputText Id="city" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.City" />
                                        <ValidationMessage For="@(() => addressDTO.City)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">County</label>
                                        <InputText Id="county" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.County" />
                                        <ValidationMessage For="@(() => addressDTO.County)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">Post Code</label>
                                        <InputText Id="postCode" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.PostCode" />
                                        <ValidationMessage For="@(() => addressDTO.PostCode)" />
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                    @if (basketItems != null)
                    {
                        <div class="mt-2 text-center">
                            <button type="button" class="py-2 px-3 my-3 bg-fotofuchsia text-white text-md font-semibold rounded-sm hover:opacity-90 fotofuchsia-ripple" @onclick="() => PlaceOrder()">
                                Place Order
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="mt-2 text-center">
                            <button type="button" class="py-2 px-3 my-3 bg-fotofuchsia text-white text-md font-semibold rounded-sm disabled:opacity-30 disabled:cursor-default" disabled>
                                Sorry, your order can not be submitted
                            </button>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="container p-4 w-full rounded-md shadow-sm bg-white focus:outline-none z-10 " >
                    <div class="mb-4 text-lg text-center md:text-xl lg:text-2xl font-bold">
                        Order Summary
                    </div>
                    <div class="p-4 text-center" role="none">
                        <span class="font-semibold text-md">Your basket is currently empty</span>
                    </div>
                </div>
            }
        }
        @if (ShowErrors)
        {
            <div class="mx-2 text-center animate-pulse">
                <div class="alert-box" role="alert">
                    <span class="block sm:inline">@ErrorMessage</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public AppState appState { get; set; }

    private List<BasketItem> basketItems { get; set; }
    private string basketId = "";
    private decimal basketTotal = 0;

    private AddressDTO addressDTO = new();
    private bool ShowErrors;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await GetBasket();
    }

    private async Task GetBasket()
    {
        var storedBasketId = await localStorage.GetItemAsync<string>("fs_basketId");

        if (!String.IsNullOrEmpty(storedBasketId))
        {
            basketId = storedBasketId;

            var basket = await basketService.GetBasketByID(basketId);

            if (basket != null)
            {
                basketItems = basket.BasketItems;
                basketTotal = basket.BasketTotal;
            }
            else
            {
                basketItems = null;
            }
        }
        else
        {
            basketItems = null;
        }
    }

    private async Task EmptyBasket()
    {
        await basketService.DeleteBasket(basketId);
        await localStorage.RemoveItemAsync("fs_basketId");

        await GetBasket();
        appState.BasketItemCount = 0;
    }

    private async Task DeleteItem(BasketItem item)
    {
        var basket = await basketService.GetBasketByID(basketId);

        basket.BasketItems.Remove(basket.BasketItems.FirstOrDefault(
                i => i.Product.Name == item.Product.Name &&
                i.Quantity == item.Quantity
            ));

        await basketService.UpdateBasket(basket);
        await GetBasket();
    }

    private async Task PlaceOrder()
    {
        ShowErrors = false;

        var address = new Address {
            FirstName = addressDTO.FirstName,
            LastName = addressDTO.LastName,
            Street = addressDTO.Street,
            SecondLine = addressDTO.SecondLine,
            City = addressDTO.City,
            County = addressDTO.County,
            PostCode = addressDTO.PostCode
        };

        var orderToCreate = new OrderCreateDTO {
             Items = basketItems,
             SendToAddress = address
        };
        
        var newOrder = await orderService.CreateOrderAsync(orderToCreate);

        if (newOrder != null) 
        {
            ShowErrors = false;

            // toast message
            toastService.ShowSuccess("Thanks, your order has been placed!", "Order Placed");

            // navigate away to confirmation page
        }
        else
        {
            ShowErrors = true;
            ErrorMessage = "Sorry, there was an error placing your order";
        }
    }
}
