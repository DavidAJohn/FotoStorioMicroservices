@page "/checkout"

@attribute [Authorize]

@using Blazored.LocalStorage
@using Blazored.Toast
@using Store.BlazorWasm.Contracts
@using Store.BlazorWasm.DTOs
@using Store.BlazorWasm.Models

@inject IBasketService basketService
@inject IOrderService orderService
@inject ILocalStorageService localStorage
@inject IToastService toastService
@inject IConfiguration config
@inject IJSRuntime JsRuntime
@inject IPaymentService paymentService
@inject IAccountService accountService
@inject NavigationManager navigationManager

<div class="h-auto">
    <div class="container max-w-7xl md:mt-8">
        @if (basketItems != null)
        {
            @if (basketItems.Count > 0)
            {
                <div class="w-full p-4 rounded-md shadow-md bg-white focus:outline-none z-10">
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div class="col-span-1">
                            <div class="text-lg text-center md:text-xl lg:text-2xl font-bold">
                                Order Summary
                            </div>
                            <div class="p-4 text-right" >
                                @foreach (BasketItem item in basketItems)
                                {
                                    <div class="font-semibold text-base flex items-center justify-end">
                                        <div class="inline-block w-16 h-auto mr-2"><img src="@item.Product.ImageUrl" /></div>
                                        <div class="inline-block flex-shrink-0">@item.Quantity &nbsp;x&nbsp; @item.Product.Name &nbsp;=</div>
                                        <div class="ml-2 font-bold">£@item.Total</div>
                                        <button type="button" class="inline-block ml-2 -mr-1 text-fotofuchsia" @onclick="() => DeleteItem(item)">
                                            <!-- heroicons: x-circle (solid) -->
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="mt-2 px-4 text-right text-base font-semibold">
                                Total:&nbsp; <span class="inline font-bold">£@basketTotal.ToString("N2")</span>
                            </div>
                            
                        </div>
                        <div class="col-span-1 bg-gray-50 rounded-sm text-center h-full px-16">
                            <div class="text-lg text-center md:text-xl lg:text-2xl font-bold mb-4">
                                Delivery Address
                            </div>
                            <div class="flex justify-center px-4 md:px-8 py-2">
                                <EditForm id="@AddressFormID" name="@AddressFormID" Model="@addressDTO" OnValidSubmit="PlaceOrder">
                                    <DataAnnotationsValidator />
                                    <div class="w-full inline-flex">
                                        <div class="inline mb-2 w-1/2 text-left mr-2">
                                            <label class="text-sm font-semibold mb-1 ml-0">First Name</label>
                                            <InputText id="firstName" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.FirstName" />
                                            <ValidationMessage For="@(() => addressDTO.FirstName)" />
                                        </div>
                                        <div class="inline mb-2 w-1/2 text-left">
                                            <label class="text-sm font-semibold mb-1 ml-0">Last Name</label>
                                            <InputText id="lastName" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.LastName" />
                                            <ValidationMessage For="@(() => addressDTO.LastName)" />
                                        </div>
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">Street</label>
                                        <InputText id="street" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.Street" />
                                        <ValidationMessage For="@(() => addressDTO.Street)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">Village/Area (optional)</label>
                                        <InputText id="secondLine" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.SecondLine" />
                                        <ValidationMessage For="@(() => addressDTO.SecondLine)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">City</label>
                                        <InputText id="city" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.City" />
                                        <ValidationMessage For="@(() => addressDTO.City)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">County</label>
                                        <InputText id="county" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.County" />
                                        <ValidationMessage For="@(() => addressDTO.County)" />
                                    </div>
                                    <div class="mb-2 w-full text-left">
                                        <label class="text-sm font-semibold mb-1 ml-0">Post Code</label>
                                        <InputText id="postCode" class="px-2 py-1 text-sm rounded-sm focus:border-blue-700 border-3 outline-none w-full" @bind-Value="addressDTO.PostCode" />
                                        <ValidationMessage For="@(() => addressDTO.PostCode)" />
                                    </div>
                                </EditForm>
                            </div>
                            <div class="place-content-center">
                                <button type="button" class="p-2 my-3 bg-fotofuchsia text-white rounded-sm text-sm font-semibold hover:opacity-90 fotofuchsia-ripple" 
                                    @onclick="ClearAddress">
                                    Clear Address
                                </button>
                            </div>
                        </div>
                    </div>

                    @if (ShowPaymentOptions)
                    {
                        <div class="text-lg text-center md:text-xl lg:text-2xl font-bold my-8">
                            Card Details
                        </div>
                        <div class="flex justify-center">
                            <div>
                                <form id="payment-form" class="justify-items-center">
                                    <input id="name-on-card" class="w-112 p-3 rounded-md shadow-sm border border-gray-300 text-base text-gray-900 mb-1" placeholder="Name on Card" />
                                    <div id="card-element" class="w-112 p-3 rounded-md shadow-sm border border-gray-300">
                                        <!-- Stripe injects the Card Element here -->
                                    </div>
                                    <div id="card-error" class="mt-3 flex justify-center font-semibold text-red-500 animate-pulse">
                                        <!-- Stripe card errors are shown here -->
                                    </div>
                                </form>
                            </div>
                        </div>
                        <div class="mt-4 w-full flex justify-center">
                            <button type="submit" form="@AddressFormID" id="btnPlaceOrder" class="flex justify-center align-items-center py-2 px-4 my-3 bg-fotofuchsia text-white text-base font-semibold rounded-sm hover:opacity-90 fotofuchsia-ripple">
                                <svg version="1.1" id="order-spinner" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                    class="h-5 w-5 @SubmitSpinnerHidden" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
                                    <path fill="currentColor" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z">
                                        <animateTransform attributeType="xml"
                                            attributeName="transform"
                                            type="rotate"
                                            from="0 25 25"
                                            to="360 25 25"
                                            dur="0.7s"
                                            repeatCount="indefinite"/>
                                    </path>
                                </svg>
                                <div id="order-text" class="ml-2">Place Order (£@basketTotal.ToString("N2"))</div>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="mt-2 text-center">
                            <button type="button" class="py-2 px-3 my-3 bg-fotofuchsia text-white text-base font-semibold rounded-sm disabled:opacity-30 disabled:cursor-default" disabled>
                                Sorry, your order can not be submitted
                            </button>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="container p-4 w-full rounded-md shadow-sm bg-white focus:outline-none z-10 " >
                    <div class="mb-4 text-lg text-center md:text-xl lg:text-2xl font-bold">
                        Order Summary
                    </div>
                    <div class="p-4 text-center" role="none">
                        <span class="font-semibold text-base">Your basket is currently empty</span>
                    </div>
                </div>
            }
        }
        @if (ShowErrors)
        {
            <div class="mx-2 text-center animate-pulse">
                <div class="alert-box" role="alert">
                    <span class="block sm:inline">@ErrorMessage</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public ErrorLogger Error { get; set; }

    [CascadingParameter]
    public AppState appState { get; set; }

    private List<BasketItem> basketItems { get; set; }
    private string basketId = "";
    private decimal basketTotal = 0;

    private AddressDTO addressDTO = new();
    private bool ShowErrors;
    private string ErrorMessage;

    private bool ShowPaymentOptions = false;
    private string SubmitSpinnerHidden = "hidden";
    private string AddressFormID = "address-form";

    protected override async Task OnInitializedAsync()
    {
        await GetBasket();

        // populate the address form with the user's default address (if they have one)
        addressDTO = await accountService.GetUserAddressAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)     
    {        
        if (firstRender)         
        {
            ShowPaymentOptions = true;
            var clientSecret = "";
            var storedBasketId = await localStorage.GetItemAsync<string>("fs_basketId");
            
            if (storedBasketId != null)
            {
                // get a payment intent from Stripe and update the basket
                await GetPaymentIntentResultAsync(storedBasketId);

                // get the client secret from the basket
                var basket = await basketService.GetBasketByID(storedBasketId);
                clientSecret = basket.ClientSecret;

                try
                {
                    var jsParams = new
                    {
                        Key = config["Stripe_PublishableKey"],
                        Secret = clientSecret
                    };

                    // initialise our custom stripe js file, so the card entry form is displayed 
                    await JsRuntime.InvokeVoidAsync("setupStripe", jsParams); // wwwroot/js/stripe.js
                }
                catch (JSException ex)
                {
                    Error.ProcessError(ex, "Pages/Checkout/OrderSummary.OnAfterRenderAsync()");
                    ErrorMessage = "Could not set up payment options. Try reloading the page and/or logging in again";
                }
            }

            firstRender = false;

            if (basketItems == null)
            {
                ShowPaymentOptions = false;
            }
        }
    }

    public async Task GetPaymentIntentResultAsync(string basketId)
    {
        var basket = await basketService.GetBasketByID(basketId);
        var result = await paymentService.CreateOrUpdatePaymentIntent(basket);

        if (result != null)
        {
            // add created payment intent details to the basket
            basket.PaymentIntentId = result.PaymentIntentId;
            basket.ClientSecret = result.ClientSecret;

            await basketService.UpdateBasket(basket);
        }
    }

    private async Task GetBasket()
    {
        var storedBasketId = await localStorage.GetItemAsync<string>("fs_basketId");

        if (!String.IsNullOrEmpty(storedBasketId))
        {
            basketId = storedBasketId;

            var basket = await basketService.GetBasketByID(basketId);

            if (basket != null)
            {
                basketItems = basket.BasketItems;
                basketTotal = basket.BasketTotal;
                ShowPaymentOptions = true;
            }
            else
            {
                basketItems = null;
            }
        }
        else
        {
            basketItems = null;
        }
    }

    private async Task EmptyBasket()
    {
        await basketService.DeleteBasket(basketId);
        await localStorage.RemoveItemAsync("fs_basketId");

        await GetBasket();
        appState.BasketItemCount = 0;
    }

    private async Task DeleteItem(BasketItem item)
    {
        var basket = await basketService.GetBasketByID(basketId);

        basket.BasketItems.Remove(basket.BasketItems.FirstOrDefault(
                i => i.Product.Name == item.Product.Name &&
                i.Quantity == item.Quantity
            ));

        await basketService.UpdateBasket(basket);
        await GetBasket();
    }

    private async Task PlaceOrder()
    {
        ShowErrors = false;
        SubmitSpinnerHidden = "";

        var orderAddress = new Address {
            FirstName = addressDTO.FirstName,
            LastName = addressDTO.LastName,
            Street = addressDTO.Street,
            SecondLine = addressDTO.SecondLine,
            City = addressDTO.City,
            County = addressDTO.County,
            PostCode = addressDTO.PostCode
        };

        var storedBasketId = await localStorage.GetItemAsync<string>("fs_basketId");
        var basket = await basketService.GetBasketByID(storedBasketId);

        var orderToCreate = new OrderCreateDTO {
             Items = basketItems,
             SendToAddress = orderAddress,
             PaymentIntentId = basket.PaymentIntentId
        };

        var newOrder = await orderService.CreateOrderAsync(orderToCreate);

        if (newOrder != null)
        {
            string paymentResult = "";
            SubmitSpinnerHidden = "hidden";

            try
            {
                // invoke js method to submit payment
                paymentResult = await JsRuntime.InvokeAsync<string>("payWithCard");
            }
            catch (JSException ex)
            {
                Error.ProcessError(ex, "Pages/Checkout/OrderSummary.PlaceOrder()");
                paymentResult = "There was a problem sending your payment details";
            }

            if (paymentResult != "success")
            {
                ShowErrors = true;
                ErrorMessage = paymentResult;
                toastService.ShowError(paymentResult, "Payment Failed");
            }
            else 
            {
                ShowErrors = false;

                // empty the basket of items
                await EmptyBasket();

                // toast message
                toastService.ShowSuccess("Thanks, your order has been placed!", "Order Placed");

                // save the address to the user's account
                await accountService.SaveUserAddressAsync(addressDTO);

                // navigate away to confirmation page
                navigationManager.NavigateTo($"/checkout/success/{newOrder.OrderId}");
            }
        }
        else
        {
            ShowErrors = true;
            ErrorMessage = "Sorry, there was a problem creating your order";
            SubmitSpinnerHidden = "hidden";
        }
    }

    private void ClearAddress()
    {
        addressDTO = new AddressDTO {};
    }
}
