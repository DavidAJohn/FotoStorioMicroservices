@page "/products/details/{id:int}"

@using Store.BlazorWasm.Models
@using Store.BlazorWasm.Contracts

@inject IProductService productService
@inject IBasketService basketService

<div class="container">
    @if (errorMessage != "")
    {
        <div class="alert alert-danger" role="alert">
            <h4>@errorMessage</h4>
        </div>
    }
    else if (product == null)
    {
        <text>Loading product details...</text>
    }
    else
    {
        <button class="p-2 my-3 bg-fotofuchsia text-white rounded-sm text-sm hover:opacity-75">
            <a href="/products" class="hover:text-white">Go Back</a>
        </button>

        <div class="mt-4 grid sm:grid-cols-1 lg:grid-cols-2 gap-16">
            <div class="w-full mx-4">
                <img src="@product.ImageUrl" />
            </div>
            <div>
                <div class="text-2xl font-bold mb-4">@product.Name</div>
                <div class="mb-4">
                    <span class="block text-gray-500 text-md mb-1">Brand: @product.Brand</span>
                    <span class="block text-gray-500 text-md">Category: @product.Category</span>
                </div>
                @if (product.SalePrice != 0 && product.SalePrice < product.Price)
                {
                    <div class="mb-4">
                        <span class="text-gray-500 text-md line-through mr-4">Was: £@product.Price</span>
                        <span class="inline text-gray-500 text-lg font-semibold">Now: £@product.SalePrice</span>
                    </div>
                }
                else
                {
                    <div class="mb-4">
                        <span class="block text-gray-500 text-lg font-semibold">£@product.Price</span>
                    </div>
                }
                <div class="font-bold text-md text-green-700 mb-4">In Stock</div>
                <div class="font-bold text-md mb-4 flex flex-row justify-items-start items-center h-2 w-2">
                    <div class="font-bold text-md mr-3">Quantity:</div>
                    <button type="button" class="border-1 border-solid border-gray-300 rounded p-2 hover:bg-fotofuchsia hover:text-gray-50" @onclick="() => ChangeQuantity(false)">
                        <!-- heroicons: minus-sm icon -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 12H6" />
                        </svg>
                    </button>
                    <input type="text" class="font-bold mx-2 border-none focus:outline-none w-6 text-center " value="@itemQuantity" readonly />
                    <button type="button" class="border-1 border-solid border-gray-300 rounded p-2 hover:bg-fotofuchsia hover:text-gray-50" @onclick="() => ChangeQuantity(true)">
                        <!-- heroicons: plus icon -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                    </button>
                </div>
                <button class="flex flex-row justify-start items-center bg-fotofuchsia p-2 rounded-sm mt-10 mb-4 sm:w-1/2 sm:text-center xl:w-1/3 ">
                    <span class=" text-gray-50 ml-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                    </span>
                    <span class="text-gray-50 text-md ml-3" @onclick="AddItemToBasket">Add to Basket</span>
                </button>
                <div class="text-base mb-4 text-justify">@product.Description</div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public ErrorLogger Error { get; set; }

    private Product product;
    private string errorMessage = "";
    private int itemQuantity = 1;

    [CascadingParameter]
    public AppState appState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetProductById();
        itemQuantity = 1;
    }

    private async Task GetProductById()
    {
        try
        {
            product = await productService.GetProductByIdAsync(Id);
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex, "Pages/Products/Details.GetProductById()");
            errorMessage = "Could not retrieve details for this product";
        }
    }

    private void ChangeQuantity(bool increase)
    {
        if (increase)
        {
            if (itemQuantity <= 4) // limit to 5
            {
                itemQuantity++;
            }
        }
        else
        {
            if (itemQuantity >= 2) itemQuantity--;
        }
    }

    private async void AddItemToBasket()
    {
        var currentBasket = await basketService.GetBasketByID("basket1");

        var newItem = new BasketItem { Product = product, Quantity = itemQuantity };
        currentBasket.BasketItems.Add(newItem);

        var updatedBasket = await basketService.UpdateBasket(currentBasket);

        // also set AppState.BasketItemCount to update the item count displayed in the BasketDropdown
        appState.BasketItemCount = updatedBasket.BasketItems.Count;
    }
}
