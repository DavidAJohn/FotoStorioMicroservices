@page "/products/"

@using Store.BlazorWasm.Contracts
@using Store.BlazorWasm.Models

@inject IProductService productService

<div class="container">
    @if (errorMessage != "")
    {
        <div class="alert alert-danger" role="alert">
            <h4>@errorMessage</h4>
        </div>
    }
    else if (products == null)
    {
        <text>Loading products...</text>
    }
    else
    {
        <div class="flex flex-row justify-between">
            <div>
                <Search OnSearchChanged="SearchChanged"
                        ClearSearch=@ClearSearch
                        Placeholder="Search for a product..." 
                />
            </div>
            <div>
                <Dropdown dropdownTitle="Sort products by:"
                          dropdownOptions=@dropdownOptions 
                />
            </div>
        </div>
        <div class="mt-8 grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-10">
            @foreach (var product in products)
            {
                <div class="product-card hover:shadow-xl hover:opacity-70">
                    <a href="products/details/@product.Id" class="hover:text-fotoblue">
                        <img src="@product.ImageUrl" alt="@product.Name" class="w-full h-32 sm:h-48 object-cover">
                        <div class="m-4">
                            <span class="font-bold block">@product.Name</span>
                            @if (product.SalePrice != 0 && product.SalePrice < product.Price)
                            {   
                                <span class="text-gray-500 text-sm line-through mr-4">£@product.Price</span>
                                <span class="inline text-gray-500 text-sm">Now: £@product.SalePrice</span>
                            }
                            else
                            {
                                <span class="block text-gray-500 text-sm">£@product.Price</span>
                            }
                        </div>
                    </a>
                    @if (product.SalePrice != 0 && product.SalePrice < product.Price)
                    {
                        <div class="product-badge">
                            <svg class="h-6 w-6 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                            </svg>
                            <span>Save £@((product.Price - product.SalePrice))</span>
                        </div>
                    }
                </div>
            }
        </div>
        <div>
            <Pagination metadata="metadata" Spread="10" SelectedPage="SelectedPage" />
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public ErrorLogger Error { get; set; }
    private string errorMessage = "";

    List<Product> products;
    List<DropdownItem> dropdownOptions = new();
    private bool ClearSearch = false;

    private PagingMetadata metadata = new();
    private ProductParameters productParams = new();
    
    protected override async Task OnInitializedAsync()
    {
        await SelectedPage();
    }

    protected override void OnInitialized()
    {
        SetSortByDropdownOptions();
    }

    private async Task GetProducts()
    {
        try
        {
            var productsWithMetadata = await productService.GetProductsAsync(productParams);
            products = productsWithMetadata.Items;
            metadata = productsWithMetadata.Metadata;
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex, "Pages/Products/Index.GetProducts()");
            errorMessage = "Could not retrieve list of products";
        }
    }

    private async Task SelectedPage(int page = 1)
    {
        productParams.PageIndex = page;

        await GetProducts();
    }

    private async Task SearchChanged(string searchTerm = "")
    {
        productParams.PageIndex = 1;
        productParams.Search = searchTerm;

        await GetProducts();
    }

    private void SetSortByDropdownOptions()
    {
        dropdownOptions.Add(new DropdownItem{ Id = 1, OptionName = "Name (A-Z)", OptionRef = "#" });
        dropdownOptions.Add(new DropdownItem{ Id = 2, OptionName = "Price (Highest to Lowest)", OptionRef = "#" });
        dropdownOptions.Add(new DropdownItem{ Id = 3, OptionName = "Price (Lowest to Highest)", OptionRef = "#" });
        dropdownOptions.Add(new DropdownItem{ Id = 4, OptionName = "Name (Z-A)", OptionRef = "#" });
    }
}
