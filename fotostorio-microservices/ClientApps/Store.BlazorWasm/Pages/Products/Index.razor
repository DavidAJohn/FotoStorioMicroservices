@page "/products/"
@page "/products/brands/{brandId:int}"
@page "/products/categories/{categoryId:int}"

@using Store.BlazorWasm.Contracts
@using Store.BlazorWasm.Models

@inject IProductService productService
@inject NavigationManager navigationManager

<div class="container">
    @if (errorMessage != "")
    {
        <div class="alert alert-danger" role="alert">
            <h4>@errorMessage</h4>
        </div>
    }
    else if (products == null)
    {
        <text>Loading products...</text>
    }
    else
    {
        @if (products.Count() > 0)
        {
            <div class="flex flex-row justify-between items-center">
                <div class="inline">
                    <span class="w-64">
                        <Search OnSearchChanged="SearchChanged"
                            ClearSearch=@ClearSearch
                            Placeholder="Search for a product..." 
                        />
                    </span>
                    <span class="ml-1">
                        <button class="p-2 bg-blue-900 text-white rounded-sm text-md font-semibold hover:opacity-90 fotoblue-ripple" @onclick="async () => await ResetSearch()">
                            Clear Search
                        </button>
                    </span>
                </div>
                <div class="relative inline-block">
                    <!-- Sort By dropdown -->
                    <div class="text-left">
                        <div class="text-gray-700 mr-2 py-2 text-md font-medium inline">Sort Products By:</div>
                        <div class="inline-block">
                            <button type="button" class="inline-flex justify-center w-72 rounded-sm border border-gray-700 shadow-sm px-4 py-2 bg-white text-md font-medium text-gray-700 hover:bg-gray-50 focus:outline-none" 
                                id="menu-button"
                                @onclick="ToggleDropdown"
                            >
                                @SortBySelected
                                <!-- Heroicon name: solid/chevron-down -->
                                <svg class="-mr-1 ml-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                            @if (dropdownOptions != null)
                            {
                                <div class="origin-top-right absolute right-0 mt-2 w-72 rounded-md shadow-md bg-white focus:outline-none z-10 transition ease-in-out duration-300 @DropdownTransformClass" role="menu" tabindex="-1">
                                    <div class="py-1 hover:cursor-pointer">
                                        @foreach (DropdownItem item in dropdownOptions)
                                        {
                                            <NavLink  
                                                class="block px-4 py-1 text-md text-center font-semibold text-gray-700 hover:bg-gray-200 hover:text-gray-700 " 
                                                role="menuitem" 
                                                tabindex="-1" 
                                                id=@($"menu-item-{item.Id}")
                                                @onclick='async () => await AddSort(item.OptionRef, item.OptionName)'
                                            >
                                                <span class="text-center cursor-pointer">@item.OptionName</span>
                                            </NavLink>
                                        }
                                    </div>
                                </div>
                            }
                    </div>
                </div>
            </div>

            <div class="mt-12 grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-10">
                @foreach (var product in products)
                {
                    <div class="product-card hover:shadow-xl hover:opacity-70">
                        <a href="products/details/@product.Id" class="hover:text-fotoblue">
                            <img src="@product.ImageUrl" alt="@product.Name" class="w-full h-32 sm:h-48 object-cover">
                            <div class="m-4">
                                <span class="font-bold block">@product.Name</span>
                                @if (product.SalePrice != 0 && product.SalePrice < product.Price)
                                {   
                                    <span class="text-gray-500 text-sm line-through mr-4">£@product.Price</span>
                                    <span class="inline text-gray-500 text-sm">Now: £@product.SalePrice</span>
                                }
                                else
                                {
                                    <span class="block text-gray-500 text-sm">£@product.Price</span>
                                }
                            </div>
                        </a>
                        @if (product.SalePrice != 0 && product.SalePrice < product.Price)
                        {
                            <div class="product-badge">
                                <svg class="h-6 w-6 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                </svg>
                                <span>Save £@((product.Price - product.SalePrice))</span>
                            </div>
                        }
                    </div>
                }
            </div>
            <div>
                <Pagination metadata="metadata" Spread="8" SelectedPage="SelectedPage" />
            </div>
        }
        else
        {
            <div class="pt-8 text-center font-semibold text-xl">
                <p>No products found...</p>
            </div>
            <div class="pt-8 text-center mb-64">
                <button class="p-2 bg-fotofuchsia text-white rounded-sm text-md font-semibold hover:opacity-90 fotofuchsia-ripple" 
                    @onclick="GoToHomePage"
                >
                    Go to Home page
                </button>
            </div>
        }
    }
</div>

@code {
    [CascadingParameter]
    public ErrorLogger Error { get; set; }

    [Parameter]
    public int brandId { get; set; } = 0;

    [Parameter]
    public int categoryId { get; set; } = 0;

    List<Product> products;

    List<DropdownItem> dropdownOptions = new();

    private bool collapseDropdown = true;

    private string DropdownTransformClass => collapseDropdown ? "transform opacity-0 scale-90" : null;
    
    private void ToggleDropdown()
    {
        collapseDropdown = !collapseDropdown;
    }

    private string SortBySelected = "Name (A-Z)";

    private PagingMetadata metadata = new();
    private ProductParameters productParams = new();

    private string errorMessage = "";

    private bool ClearSearch = false;

    protected override async Task OnParametersSetAsync()
    {
        if (brandId != 0) await AddBrandFilter();
        if (categoryId != 0) await AddCategoryFilter();
    }

    protected override async Task OnInitializedAsync()
    {
        await SelectedPage();
    }

    protected override void OnInitialized()
    {
        SetSortByDropdownOptions();
    }

    private async Task GetProducts()
    {
        try
        {
            var productsWithMetadata = await productService.GetProductsAsync(productParams);
            products = productsWithMetadata.Items;
            metadata = productsWithMetadata.Metadata;
            errorMessage = "";
        }
        catch (Exception ex)
        {
            Error.ProcessError(ex, "Pages/Products/Index.GetProducts()");
            errorMessage = "Could not retrieve list of products";
        }
    }

    private async Task SelectedPage(int page = 1)
    {
        productParams.PageIndex = page;

        await GetProducts();
    }

    private async Task SearchChanged(string searchTerm = "")
    {
        productParams.PageIndex = 1;
        productParams.Search = searchTerm;

        await GetProducts();
    }

    private async Task AddSort(string SortBy, string SortByName) 
    {
        productParams.SortBy = SortBy;
        SortBySelected = SortByName;
        ToggleDropdown();
        await GetProducts();
    }

    private async Task AddBrandFilter() 
    {
        productParams.BrandId = brandId;
        await GetProducts();
    }

    private async Task AddCategoryFilter() 
    {
        productParams.CategoryId = categoryId;
        await GetProducts();
    }

    private async Task ResetSearch()
    {
        ClearSearch = true;
        await SearchChanged();
    }

    private void SetSortByDropdownOptions()
    {
        dropdownOptions.Add(new DropdownItem{ Id = 1, OptionName = "Name (A-Z)", OptionRef = "nameAsc" });
        dropdownOptions.Add(new DropdownItem{ Id = 2, OptionName = "Price (Highest to Lowest)", OptionRef = "priceDesc" });
        dropdownOptions.Add(new DropdownItem{ Id = 3, OptionName = "Price (Lowest to Highest)", OptionRef = "priceAsc" });
        dropdownOptions.Add(new DropdownItem{ Id = 4, OptionName = "Name (Z-A)", OptionRef = "nameDesc" });
    }

    private void GoToHomePage()
    {
        navigationManager.NavigateTo("/");
    }
}
