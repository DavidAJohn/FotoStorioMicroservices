@using Store.BlazorWasm.Extensions

@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <div class="md:mr-4">
            @if (displayName != "")
            {
                <span class="hidden sm:inline text-gray-50 text-sm font-medium md:mr-6">Hi, @displayName</span>
            }
            @if (role == "Administrator")
            {
                <span class="text-gray-300 text-sm font-medium md:mr-2">Admin Page</span> 
            }
            @if (role == "Marketing")
            {
                <span class="text-gray-300 text-sm font-medium md:mr-2">Marketing Page</span> 
            }
            @if (role == "User")
            {
                <span class="md:mr-2">
                    <NavLink href="/account/orders" class="text-gray-300 hover:bg-blue-900 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                        Your Orders
                    </NavLink>
                </span>
            }
                <span class="md:mr-2">
                    <NavLink href="/account/orders" class="text-gray-300 hover:bg-blue-900 hover:text-white px-3 py-2 rounded-md text-sm font-medium">
                        Your Orders
                    </NavLink>
                </span>
            <NavLink href="logout" class="text-gray-300 hover:bg-blue-900 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Log out</NavLink>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="md:mr-4">
            <NavLink href="login" class="text-gray-300 hover:bg-blue-900 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Log In</NavLink>
            <NavLink href="register" class="text-gray-300 hover:bg-blue-900 hover:text-white px-3 py-2 rounded-md text-sm font-medium">Register</NavLink>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string displayName = "";
    private string role;

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
    }

    private async Task GetClaimsPrincipalData()
    {
        displayName = "";
        role = "";

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            displayName = user?.GetDisplayNameFromPrincipal();
            role = user?.GetRoleFromPrincipal();
        }
    }

}
